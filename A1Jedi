package a1;
import java.util.Scanner;
import Java.math;
public class A1Jedi {

	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
	
		
		
	
		
		
		int assignmentgrade = scanner.nextInt();
		int totalPoints = 0;
		for(int i = 0; i < assignmentgrade; ++i) {
			totalPoints += scanner.nextInt();
		}
		
		
		int totalParticipationpoints = scanner.nextInt();
		
		int totalStudents = scanner.nextInt();
		String[] lastName = new String[totalStudents]; 
		String[] firstName = new String[totalStudents];
		double[] mGrade = new double[totalStudents];
		double[] eGrade = new double[totalStudents];
		double totalmGrades = 0;
		double averageofmGrade;
		double averageoftotalmGrades;
		double standardDeviationm = 0;
		double pGrade;
		double totaleGrades = 0;
		double averageofeGrade;
		double averageoftotaleGrades;
		double standardDeviatione = 0;
		double avg = 0;
		double mCurvePercentage;
		double mcurvedScore;
		double ecurvedScore;
		double avgEGrade = 0;
		double = eCurvePercentage;
		
		double = finalaGrade;
		for(int u = 0; u < totalStudents; ++u) {
			firstName[u] = scanner.next();
			lastName[u] = scanner.next();
			double pGrade = scanner.nextInt();
			double totalApoints = 0;
			for(int i = 0; i < assignmentgrade; ++i) {
				totalApoints += scanner.nextDouble();
			}
			double finalaGrade = 100 * totalApoints / totalPoints;
			mGrade[u] = scanner.nextDouble();
			for(int d = 0; d < totalStudents; ++d) {
				double normalized = mGrade[d] - avg / standardDeviationm;
				if (normalized >= 2.0)
						mcurvedScore = 100;
						
				if(normalized >= 1.0 && normalized < 2.0)
					mCurvePercentage = 94;
					mcurvedScore =  ((((normalized) - (1.0)) /
		                 (2.0 - (1.0))) *
			               (100 - 94.0)) + 94.0;
				if(normalized >= 0.0 && normalized < 1.0)
					mCurvePercentage = 85;
					mcurvedScore =  ((((normalized) - (0.0)) /
		                 (1.0 - (0.0))) *
			               (94 - 85.0)) + 85.0;
				if(normalized >= -1.0 && normalized < 0.0)
					mCurvePercentage = 75;
					mcurvedScore =  ((((normalized) - (-1.0)) /
		                 (0.0 - (-1.0))) *
			               (85.0 - 75.0)) + 75.0;

				if(normalized >= -2.0 && normalized < -1.0)
					mCurvePercentage = 55;
					mcurvedScore =  ((((normalized) - (-2.0)) /
		                 (-1.0 - (-2.0))) *
			               (75.0 - 55.0)) + 55.0;
				if(normalized >= -3.0 && normalized < -2.0)
					mCurvePercentage = 30;
					mcurvedScore =  ((((normalized) - (-3.0)) /
		                 (-2.0 - (-3.0))) *
			               (55.0 - 30.0)) + 30.0;
				if(normalized <= -4.0)
					mcurvedScore = 0;
				
			}
			
			eGrade[u] = scanner.nextDouble();
			for(int l = 0; l < totalStudents; ++l) {
				double normalizede = eGrade[l] - avgEGrade / standardDeviatione;
				if (normalizede >= 2.0)
						ecurvedScore = 100;
						
				if(normalizede >= 1.0 && normalizede < 2.0)
					eCurvePercentage = 94;
					ecurvedScore =  ((((normalizede) - (1.0)) /
		                 (2.0 - (1.0))) *
			               (100 - 94.0)) + 94.0;
				if(normalizede >= 0.0 && normalizede < 1.0)
					eCurvePercentage = 85;
					ecurvedScore =  ((((normalizede) - (0.0)) /
		                 (1.0 - (0.0))) *
			               (94 - 85.0)) + 85.0;
				if(normalizede >= -1.0 && normalizede < 0.0)
					eCurvePercentage = 75;
					ecurvedScore =  ((((normalizede) - (-1.0)) /
		                 (0.0 - (-1.0))) *
			               (85.0 - 75.0)) + 75.0;

				if(normalizede >= -2.0 && normalizede < -1.0)
					eCurvePercentage = 55;
					ecurvedScore =  ((((normalizede) - (-2.0)) /
		                 (-1.0 - (-2.0))) *
			               (75.0 - 55.0)) + 55.0;
				if(normalizede >= -3.0 && normalizede < -2.0)
					eCurvePercentage = 30;
					ecurvedScore =  ((((normalizede) - (-3.0)) /
		                 (-2.0 - (-3.0))) *
			               (55.0 - 30.0)) + 30.0;
				if(normalizede <= -4.0)
					ecurvedScore = 0;
				
			}
		}
			
			for (int x = 0; x < mGrade.length; x++) {
				avg += mGrade[x];
			}
			
			avg /= mGrade.length;
			for (int r = 0; r < totalStudents; r++) {
				averageofmGrade = mGrade[r] - avg;
				totalmGrades += averageofmGrade * averageofmGrade;
				averageoftotalmGrades = totalmGrades / totalStudents;
				standardDeviationm = Math.sqrt(averageoftotalmGrades);
			}
			//double avgEGrade = 0;
			for (int x = 0; x < eGrade.length; x++) {
				avgEGrade += eGrade[x];
			}
			avgEGrade /= eGrade.length;
		
			 for (int p = 0; p < totalStudents; p++) {
				averageofeGrade = eGrade[p] - avgEGrade;
				totaleGrades += averageofeGrade * averageofeGrade;
				averageoftotaleGrades = totaleGrades / totalStudents;
				standardDeviatione = Math.sqrt(averageoftotaleGrades);
				}
			 
		    double finalPgrade = 100 * pGrade / totalParticipationpoints / 0.8;
		    if (finalPgrade > 100) 
				finalPgrade = 100;
			double assignmentGradePercentage = .40 * finalaGrade;
			double participationGradePercentage = .15 * finalPgrade;
			double midTermPercentage = .20 * mcurvedScore;
			double finalExamPercentage = .25 * ecurvedScore;	
			
			
			
		scanner.close();
	}
		// Your main program code here.
		
	}
	
	// Feel free to define addition methods here.
	// Be sure to declare them as "public static"
}

		
		
	
		
		
		
			
